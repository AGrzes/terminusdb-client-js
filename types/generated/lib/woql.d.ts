import WOQLQuery = require("./query/woqlCore");
export declare function using(refPath: any, Query: any): any;
export declare function comment(comment: string, Subq: WOQLQuery): WOQLQuery;
export declare function select(...list: any[]): WOQLQuery;
export declare function distinct(...list: any[]): WOQLQuery;
export declare function and(...queries: any[]): any;
export declare function or(...queries: any[]): any;
export declare function from(graph_filter: string, query: any): any;
export declare function into(graph_descriptor: string, query: any): any;
export declare function triple(a: string, b: string, c: string): any;
export declare function added_triple(a: string, b: string, c: string): any;
export declare function removed_triple(a: string, b: string, c: string): any;
export declare function quad(a: string, b: string, c: string, d: string): any;
export declare function added_quad(a: string, b: string, c: string, d: string): any;
export declare function removed_quad(a: string, b: string, c: string, d: string): any;
export declare function sub(a: string, b: string): boolean;
import subsumption = sub;
export declare function eq(a: string, b: string): any;
import equals = eq;
export declare function substr(String: string, Before: string, Length?: string, After?: string, SubString: any): any;
import substring = substr;
export declare function update_object(JSON: string): any;
export declare function delete_object(JSON_or_IRI: string): any;
export declare function read_object(IRI: any, Output: any, Format: any): any;
export declare function get(asvars: any, query_resource: any): any;
export declare function put(asvars: any, query: any, query_resource: any): any;
export declare function as(map: any, vari: string, ty?: string): any;
export declare function remote(url: any, opts: any): any;
export declare function file(url: any, opts: any): any;
export declare function post(url: any, opts: any): any;
export declare function delete_triple(S: string, P: string, O: string): any;
export declare function delete_quad(S: string, P: string, O: string, G: string): any;
export declare function add_triple(S: string, P: string, O: string): any;
export declare function add_quad(S: string, P: string, O: string, G: string): any;
export declare function when(Query: any, Update: any): any;
export declare function trim(a: string, b: string): any;
export declare function eval(arith: any, v: string): any;
import evaluate = eval;
export declare function plus(...args: any[]): any;
export declare function minus(...args: any[]): any;
export declare function times(...args: any[]): any;
export declare function divide(...args: any[]): any;
export declare function div(...args: any[]): any;
export declare function exp(a: any, b: any): any;
export declare function floor(a: any): any;
export declare function isa(a: string, b: string): boolean;
export declare function like(a: string, b: string, dist: any): boolean;
export declare function less(v1: string, v2: string): any;
export declare function greater(v1: string, v2: string): any;
export declare function opt(query: any): any;
import optional = opt;
export declare function unique(prefix: string, vari: string, type: string): any;
export declare function idgen(prefix: string, inputVarList: any, outputVar: string): any;
import idgenerator = idgen;
export declare function upper(l: string, u: string): any;
export declare function lower(u: string, l: string): any;
export declare function pad(input: string, pad: string, len: any, output: string): any;
export declare function split(input: string, separator: string, output: string): any;
export declare function member(El: string, List: string): any;
export declare function concat(list: any[], v: string): any;
export declare function join(input: any[], glue: string, output: string): any;
export declare function sum(input: any, output: any): any;
export declare function start(start: any, query: any): any;
export declare function limit(limit: any, query: any): any;
export declare function re(pattern: string, test: string, matches: any): any;
import regexp = re;
export declare function length(var1: string, res: string): any;
export declare function not(query: any): any;
export declare function once(query: any): any;
export declare function immediately(query: any): any;
export declare function count(countvar: any, query: any): any;
export declare function typecast(vara: string, type: string, varb: string): any;
import cast = typecast;
export declare function order_by(...ordering: any): any;
export declare function group_by(gvarlist: any, groupedvar: any, output: string, groupquery: any): any;
declare function _true(): any;
export declare function path(Subject: any, Pattern: any, Object: any, Path: any): any;
export declare function size(Graph: any, Size: any): any;
export declare function triple_count(Graph: any, TripleCount: any): any;
export declare function type_of(a: string, b: string): boolean;
export declare function star(graphRef: string, Subj: string, Pred: string, Obj: string): any;
export declare function all(Subj: any, Pred: any, Obj: any, graphRef: any): any;
export declare function node(nodeid: string, type: string): any;
export declare function insert(Node: string, Type: string, graphRef: string): any;
export declare function schema(G: any): WOQLQuery;
export declare function graph(graph: any): any;
export declare function add_class(classid: string, graph: string): any;
export declare function add_property(propid: string, type: string, graph: string): any;
export declare function delete_class(classid: string, graph: string, cvar: any): any;
export declare function delete_property(propid: string, graph: string, cvar: any): any;
export declare function doctype(Type: string, Graph: string): any;
export declare function insert_data(data: any, refGraph: string): any;
export declare function insert_class_data(data: any, refGraph: string): any;
export declare function insert_doctype_data(data: any, refGraph: string): any;
export declare function insert_property_data(data: any, refGraph: any): any;
export declare function nuke(Graph: string): any;
export declare function query(): any;
export declare function json(json: any): any;
export declare function lib(mode: any): any;
export declare function string(s: any): any;
export declare function literal(s: any, t: any): any;
export declare function iri(s: any): any;
export declare function vars(...varray: any[]): string[];
export declare function client(client: any): any;
export declare function emerge(auto_eval: any): string;
export declare function update_triple(a: any, b: any, c: any): any;
export declare function update_quad(a: any, b: any, c: any, g: any): any;
export declare function value(a: any, b: any, c: any, g: any): any;
export declare function link(a: any, b: any, c: any, g: any): any;
export declare function makeEnum(client: any, prop: any, cls: any, clslabel: any, clsdesc: any, graph: any): any;
export declare function generateChoiceList(cls: any, clslabel: any, clsdesc: any, choices: any, graph: any, parent: any): any;
export declare function updateChoiceList(cls: any, clslabel: any, clsdesc: any, choices: any, graph: any): any;
export declare function deleteChoiceList(cls: any, graph: any): any;
export declare function libs(libs: any, parent: any, graph: any, prefix: any): any;
export declare function boxClasses(prefix: any, classes: any, except: any, graph: any): any;
export { subsumption, equals, substring, evaluate, optional, idgenerator, regexp, cast, _true as true };
